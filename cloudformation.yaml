AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Docker containers from ECR to EC2

Parameters:
  dbpass:
    Type: String
  dbname:
    Type: String
  dbhost:
    Type: String
  dbuser:
    Type: String
  ImageId:
    Description: The AMI ID for the EC2 instance
    Type: AWS::EC2::Image::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
  SubnetId:
    Description: Subnet ID for the EC2 instance
    Type: AWS::EC2::Subnet::Id
  VpcId:
    Description: VPC ID for the security group
    Type: AWS::EC2::VPC::Id

Resources:
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      IamInstanceProfile: 
        Ref: EC2InstanceProfile
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install docker -y
          systemctl --now enable docker
          systemctl restart docker
          usermod -aG docker ec2-user
          yum install -y aws-cli
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-db:latest
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-app:latest
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-testing:latest
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-grafana:latest
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-prometheus:latest
          
          docker network create optimynetwork
          docker run -d --name optimy-db --network optimynetwork -p 3306:3306 -e MYSQL_ROOT_PASSWORD=${dbpass} -e MYSQL_DATABASE=${dbname} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-db:latest
          docker run -d --name optimy-app --network optimynetwork -p 8080:80 -e DB_HOST=${dbhost} -e DB_USER=${dbuser} -e DB_PASS=${dbpass} -e DB_NAME=${dbname} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-app:latest
          sleep 30
          docker run -d --name optimy-testing --network optimynetwork -p 8089:8089 -e BASE_URL=http://optimy-app:80 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-testing:latest
          docker run -d --name optimy-grafana --network optimynetwork -p 3000:3000 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-grafana:latest
          docker run -d --name optimy-prometheus --network optimynetwork -p 9090:9090 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/optimy-prometheus:latest
      NetworkInterfaces: 
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: !Ref SubnetId
          GroupSet: 
            - Ref: MySecurityGroup

  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Roles: 
        - Ref: EC2InstanceRole

  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies: 
        - PolicyName: ECRAccessPolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

Outputs:
  InstanceId:
    Description: The Instance ID
    Value: !Ref MyEC2Instance
  PublicIP:
    Description: The Public IP address of the EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
  GrafanaURL:
    Description: The URL to access Grafana
    Value: !Sub 'http://${MyEC2Instance.PublicIp}:3000'
